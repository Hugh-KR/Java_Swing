package detail;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

// user, password 3개 변경해야함

public class InfoDAO {
	
	public InfoVO readInfo(int id) {
		InfoVO vo = null; // 쓰레기값! -> 변수 초기화시켜줘야함
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			System.out.println("1. 드라이버 설정 성공");
			
			String url = "jdbc:mysql://localhost:3306/mydb";
			String user = "root";
			String password = "1234";
			
			Connection con = DriverManager.getConnection(url, user, password); // Connection
			System.out.println("2. db 연결 성공 ~!");
			
			//String sql = "select s_id, s_name, grade, state, college, major from student s join studentinfo i on s.s_id =i.studentid where s_id=?";
			String sql = "select s_id, s_name, ifnull(max(grade),0) grade, ifnull(max(state),0) state, ifnull(max(college),0) college, ifnull(max(major),0) major from student s left outer join studentinfo i on s.s_id =i.studentid where s_id=?";
			
			PreparedStatement ps = con.prepareStatement(sql); // 준비된 문장(Prepared statement)
			ps.setInt(1, id);
			System.out.println("3. sql문 생성 성공 ~!");
			
			ResultSet rs = ps.executeQuery();
			System.out.println("4. sql문 db서버로 전송 성공 ~!");
			// rs.next() true면 결과가 있음. false면 결과가 없음
			//System.out.println("반영된 row >> " + rs.next());
			if(rs.next()) { // 결과값이 true면
				System.out.println("검색 결과가 있음");
				int studentid = rs.getInt("s_id");
				String name = rs.getString("s_name");
				int grade = rs.getInt("grade");
				String state = rs.getString("state");
				String college = rs.getString("college");
				String major = rs.getString("major");				
				
				vo = new InfoVO();
				
				vo.setId(studentid);
				vo.setName(name);
				vo.setGrade(grade);
				vo.setState(state);
				vo.setCollege(college);
				vo.setMajor(major);
				
			}
			
			// DB 처리와 관련된 메모리 할당된 것 해제
			ps.close();
			con.close();
			rs.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return vo;
	}
	
	public InfoVO addInfo(int id, int grade, String state, String college, String major) {
		InfoVO vo = null; // 쓰레기값! -> 변수 초기화시켜줘야함
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			System.out.println("1. 드라이버 설정 성공");
			
			String url = "jdbc:mysql://localhost:3306/mydb";
			String user = "root";
			String password = "1234";
			
			Connection con = DriverManager.getConnection(url, user, password); // Connection
			System.out.println("2. db 연결 성공 ~!");
			
			String sql = "insert into studentinfo values(?, ?, ?, ?, ?)";
			PreparedStatement ps = con.prepareStatement(sql); // 준비된 문장(Prepared statement)
			ps.setInt(1, id);
			ps.setInt(2, grade);
			ps.setString(3, state);
			ps.setString(4, college);
			ps.setString(5, major);
			System.out.println("3. sql문 생성 성공 ~!");
			
			ps.executeUpdate();
			System.out.println("4. sql문 db서버로 전송 성공 ~!");
			// rs.next() true면 결과가 있음. false면 결과가 없음
			//System.out.println("반영된 row >> " + rs.next());
			
			// DB 처리와 관련된 메모리 할당된 것 해제
			ps.close();
			con.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return vo;
	}
	
	public InfoVO updateInfo(int id, int grade, String state, String college, String major) {
		InfoVO vo = null; // 쓰레기값! -> 변수 초기화시켜줘야함
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			System.out.println("1. 드라이버 설정 성공");
			
			String url = "jdbc:mysql://localhost:3306/mydb";
			String user = "root";
			String password = "1234";
			
			Connection con = DriverManager.getConnection(url, user, password); // Connection
			System.out.println("2. db 연결 성공 ~!");
			
			String sql = "update studentinfo set grade=?, state=?, college=?, major=? where studentid=?";
			PreparedStatement ps = con.prepareStatement(sql); // 준비된 문장(Prepared statement)
			ps.setInt(1, grade);
			ps.setString(2, state);
			ps.setString(3, college);
			ps.setString(4, major);
			ps.setInt(5, id);
			System.out.println("3. sql문 생성 성공 ~!");
			
			ps.executeUpdate();
			System.out.println("4. sql문 db서버로 전송 성공 ~!");
			// rs.next() true면 결과가 있음. false면 결과가 없음
			//System.out.println("반영된 row >> " + rs.next());
			
			// DB 처리와 관련된 메모리 할당된 것 해제
			ps.close();
			con.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return vo;
	}
}
